// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: favorite/v1/favorite.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFavoriteServiceFavoriteAction = "/favorite.FavoriteService/FavoriteAction"
const OperationFavoriteServiceGetUserFavoriteVideoList = "/favorite.FavoriteService/GetUserFavoriteVideoList"

type FavoriteServiceHTTPServer interface {
	FavoriteAction(context.Context, *FavoriteActionRequest) (*FavoriteActionReply, error)
	GetUserFavoriteVideoList(context.Context, *GetUserFavoriteVideoListRequest) (*GetUserFavoriteVideoListReply, error)
}

func RegisterFavoriteServiceHTTPServer(s *http.Server, srv FavoriteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/favorite/action", _FavoriteService_FavoriteAction0_HTTP_Handler(srv))
	r.GET("/api/favorite/videos", _FavoriteService_GetUserFavoriteVideoList0_HTTP_Handler(srv))
}

func _FavoriteService_FavoriteAction0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoriteActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceFavoriteAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FavoriteAction(ctx, req.(*FavoriteActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FavoriteActionReply)
		return ctx.Result(200, reply)
	}
}

func _FavoriteService_GetUserFavoriteVideoList0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserFavoriteVideoListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceGetUserFavoriteVideoList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserFavoriteVideoList(ctx, req.(*GetUserFavoriteVideoListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserFavoriteVideoListReply)
		return ctx.Result(200, reply)
	}
}

type FavoriteServiceHTTPClient interface {
	FavoriteAction(ctx context.Context, req *FavoriteActionRequest, opts ...http.CallOption) (rsp *FavoriteActionReply, err error)
	GetUserFavoriteVideoList(ctx context.Context, req *GetUserFavoriteVideoListRequest, opts ...http.CallOption) (rsp *GetUserFavoriteVideoListReply, err error)
}

type FavoriteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFavoriteServiceHTTPClient(client *http.Client) FavoriteServiceHTTPClient {
	return &FavoriteServiceHTTPClientImpl{client}
}

func (c *FavoriteServiceHTTPClientImpl) FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...http.CallOption) (*FavoriteActionReply, error) {
	var out FavoriteActionReply
	pattern := "/api/favorite/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFavoriteServiceFavoriteAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteServiceHTTPClientImpl) GetUserFavoriteVideoList(ctx context.Context, in *GetUserFavoriteVideoListRequest, opts ...http.CallOption) (*GetUserFavoriteVideoListReply, error) {
	var out GetUserFavoriteVideoListReply
	pattern := "/api/favorite/videos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteServiceGetUserFavoriteVideoList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
