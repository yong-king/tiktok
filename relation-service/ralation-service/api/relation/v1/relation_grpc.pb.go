// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: relation/v1/relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationService_RelationControl_FullMethodName         = "/relation.RelationService/RelationControl"
	RelationService_GetRelationListByUserID_FullMethodName = "/relation.RelationService/GetRelationListByUserID"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	// 用户关系操作
	RelationControl(ctx context.Context, in *RelationControlRequest, opts ...grpc.CallOption) (*RelationControlReply, error)
	GetRelationListByUserID(ctx context.Context, in *GetRelationListByUserIDRequest, opts ...grpc.CallOption) (*GetRelationListByUserIDReply, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) RelationControl(ctx context.Context, in *RelationControlRequest, opts ...grpc.CallOption) (*RelationControlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationControlReply)
	err := c.cc.Invoke(ctx, RelationService_RelationControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetRelationListByUserID(ctx context.Context, in *GetRelationListByUserIDRequest, opts ...grpc.CallOption) (*GetRelationListByUserIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationListByUserIDReply)
	err := c.cc.Invoke(ctx, RelationService_GetRelationListByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility.
type RelationServiceServer interface {
	// 用户关系操作
	RelationControl(context.Context, *RelationControlRequest) (*RelationControlReply, error)
	GetRelationListByUserID(context.Context, *GetRelationListByUserIDRequest) (*GetRelationListByUserIDReply, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationServiceServer struct{}

func (UnimplementedRelationServiceServer) RelationControl(context.Context, *RelationControlRequest) (*RelationControlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationControl not implemented")
}
func (UnimplementedRelationServiceServer) GetRelationListByUserID(context.Context, *GetRelationListByUserIDRequest) (*GetRelationListByUserIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationListByUserID not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}
func (UnimplementedRelationServiceServer) testEmbeddedByValue()                         {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_RelationControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).RelationControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_RelationControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).RelationControl(ctx, req.(*RelationControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetRelationListByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationListByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetRelationListByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetRelationListByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetRelationListByUserID(ctx, req.(*GetRelationListByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationControl",
			Handler:    _RelationService_RelationControl_Handler,
		},
		{
			MethodName: "GetRelationListByUserID",
			Handler:    _RelationService_GetRelationListByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation/v1/relation.proto",
}
