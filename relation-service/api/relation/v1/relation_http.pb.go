// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: relation/v1/relation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRelationServiceGetRelationListByUserID = "/relation.RelationService/GetRelationListByUserID"
const OperationRelationServiceRelationControl = "/relation.RelationService/RelationControl"

type RelationServiceHTTPServer interface {
	GetRelationListByUserID(context.Context, *GetRelationListByUserIDRequest) (*GetRelationListByUserIDReply, error)
	// RelationControl 用户关系操作
	RelationControl(context.Context, *RelationControlRequest) (*RelationControlReply, error)
}

func RegisterRelationServiceHTTPServer(s *http.Server, srv RelationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/relation/control", _RelationService_RelationControl0_HTTP_Handler(srv))
	r.GET("/api/relation/list", _RelationService_GetRelationListByUserID0_HTTP_Handler(srv))
}

func _RelationService_RelationControl0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelationControlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceRelationControl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelationControl(ctx, req.(*RelationControlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelationControlReply)
		return ctx.Result(200, reply)
	}
}

func _RelationService_GetRelationListByUserID0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRelationListByUserIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceGetRelationListByUserID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRelationListByUserID(ctx, req.(*GetRelationListByUserIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRelationListByUserIDReply)
		return ctx.Result(200, reply)
	}
}

type RelationServiceHTTPClient interface {
	GetRelationListByUserID(ctx context.Context, req *GetRelationListByUserIDRequest, opts ...http.CallOption) (rsp *GetRelationListByUserIDReply, err error)
	RelationControl(ctx context.Context, req *RelationControlRequest, opts ...http.CallOption) (rsp *RelationControlReply, err error)
}

type RelationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRelationServiceHTTPClient(client *http.Client) RelationServiceHTTPClient {
	return &RelationServiceHTTPClientImpl{client}
}

func (c *RelationServiceHTTPClientImpl) GetRelationListByUserID(ctx context.Context, in *GetRelationListByUserIDRequest, opts ...http.CallOption) (*GetRelationListByUserIDReply, error) {
	var out GetRelationListByUserIDReply
	pattern := "/api/relation/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationServiceGetRelationListByUserID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationServiceHTTPClientImpl) RelationControl(ctx context.Context, in *RelationControlRequest, opts ...http.CallOption) (*RelationControlReply, error) {
	var out RelationControlReply
	pattern := "/api/relation/control"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelationServiceRelationControl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
