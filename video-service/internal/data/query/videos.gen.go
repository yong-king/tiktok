// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"video-service/internal/data/model"
)

func newVideo(db *gorm.DB, opts ...gen.DOOption) video {
	_video := video{}

	_video.videoDo.UseDB(db, opts...)
	_video.videoDo.UseModel(&model.Video{})

	tableName := _video.videoDo.TableName()
	_video.ALL = field.NewAsterisk(tableName)
	_video.ID = field.NewInt64(tableName, "id")
	_video.UserID = field.NewInt64(tableName, "user_id")
	_video.PlayURL = field.NewString(tableName, "play_url")
	_video.CoverURL = field.NewString(tableName, "cover_url")
	_video.Title = field.NewString(tableName, "title")
	_video.Description = field.NewString(tableName, "description")
	_video.Duration = field.NewFloat32(tableName, "duration")
	_video.Tags = field.NewString(tableName, "tags")
	_video.FavoriteCnt = field.NewInt32(tableName, "favorite_cnt")
	_video.CommentCnt = field.NewInt32(tableName, "comment_cnt")
	_video.ShareCnt = field.NewInt32(tableName, "share_cnt")
	_video.CollectCnt = field.NewInt32(tableName, "collect_cnt")
	_video.IsPublic = field.NewBool(tableName, "is_public")
	_video.AuditStatus = field.NewInt32(tableName, "audit_status")
	_video.IsOriginal = field.NewBool(tableName, "is_original")
	_video.SourceURL = field.NewString(tableName, "source_url")
	_video.TranscodeStatus = field.NewInt32(tableName, "transcode_status")
	_video.VideoWidth = field.NewInt32(tableName, "video_width")
	_video.VideoHeight = field.NewInt32(tableName, "video_height")
	_video.BizExt = field.NewString(tableName, "biz_ext")
	_video.Reserved1 = field.NewString(tableName, "reserved_1")
	_video.Reserved2 = field.NewString(tableName, "reserved_2")
	_video.CreatedAt = field.NewTime(tableName, "created_at")
	_video.UpdateTime = field.NewTime(tableName, "update_time")
	_video.DeleteAt = field.NewTime(tableName, "delete_at")

	_video.fillFieldMap()

	return _video
}

type video struct {
	videoDo videoDo

	ALL             field.Asterisk
	ID              field.Int64 // IDID
	UserID          field.Int64 // ID
	PlayURL         field.String
	CoverURL        field.String
	Title           field.String
	Description     field.String
	Duration        field.Float32
	Tags            field.String
	FavoriteCnt     field.Int32
	CommentCnt      field.Int32
	ShareCnt        field.Int32
	CollectCnt      field.Int32
	IsPublic        field.Bool  // 01
	AuditStatus     field.Int32 // 012
	IsOriginal      field.Bool  // 10
	SourceURL       field.String
	TranscodeStatus field.Int32 // 012
	VideoWidth      field.Int32
	VideoHeight     field.Int32
	BizExt          field.String
	Reserved1       field.String // 1
	Reserved2       field.String // 2
	CreatedAt       field.Time
	UpdateTime      field.Time
	DeleteAt        field.Time

	fieldMap map[string]field.Expr
}

func (v video) Table(newTableName string) *video {
	v.videoDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v video) As(alias string) *video {
	v.videoDo.DO = *(v.videoDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *video) updateTableName(table string) *video {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.UserID = field.NewInt64(table, "user_id")
	v.PlayURL = field.NewString(table, "play_url")
	v.CoverURL = field.NewString(table, "cover_url")
	v.Title = field.NewString(table, "title")
	v.Description = field.NewString(table, "description")
	v.Duration = field.NewFloat32(table, "duration")
	v.Tags = field.NewString(table, "tags")
	v.FavoriteCnt = field.NewInt32(table, "favorite_cnt")
	v.CommentCnt = field.NewInt32(table, "comment_cnt")
	v.ShareCnt = field.NewInt32(table, "share_cnt")
	v.CollectCnt = field.NewInt32(table, "collect_cnt")
	v.IsPublic = field.NewBool(table, "is_public")
	v.AuditStatus = field.NewInt32(table, "audit_status")
	v.IsOriginal = field.NewBool(table, "is_original")
	v.SourceURL = field.NewString(table, "source_url")
	v.TranscodeStatus = field.NewInt32(table, "transcode_status")
	v.VideoWidth = field.NewInt32(table, "video_width")
	v.VideoHeight = field.NewInt32(table, "video_height")
	v.BizExt = field.NewString(table, "biz_ext")
	v.Reserved1 = field.NewString(table, "reserved_1")
	v.Reserved2 = field.NewString(table, "reserved_2")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdateTime = field.NewTime(table, "update_time")
	v.DeleteAt = field.NewTime(table, "delete_at")

	v.fillFieldMap()

	return v
}

func (v *video) WithContext(ctx context.Context) IVideoDo { return v.videoDo.WithContext(ctx) }

func (v video) TableName() string { return v.videoDo.TableName() }

func (v video) Alias() string { return v.videoDo.Alias() }

func (v video) Columns(cols ...field.Expr) gen.Columns { return v.videoDo.Columns(cols...) }

func (v *video) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *video) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 25)
	v.fieldMap["id"] = v.ID
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["play_url"] = v.PlayURL
	v.fieldMap["cover_url"] = v.CoverURL
	v.fieldMap["title"] = v.Title
	v.fieldMap["description"] = v.Description
	v.fieldMap["duration"] = v.Duration
	v.fieldMap["tags"] = v.Tags
	v.fieldMap["favorite_cnt"] = v.FavoriteCnt
	v.fieldMap["comment_cnt"] = v.CommentCnt
	v.fieldMap["share_cnt"] = v.ShareCnt
	v.fieldMap["collect_cnt"] = v.CollectCnt
	v.fieldMap["is_public"] = v.IsPublic
	v.fieldMap["audit_status"] = v.AuditStatus
	v.fieldMap["is_original"] = v.IsOriginal
	v.fieldMap["source_url"] = v.SourceURL
	v.fieldMap["transcode_status"] = v.TranscodeStatus
	v.fieldMap["video_width"] = v.VideoWidth
	v.fieldMap["video_height"] = v.VideoHeight
	v.fieldMap["biz_ext"] = v.BizExt
	v.fieldMap["reserved_1"] = v.Reserved1
	v.fieldMap["reserved_2"] = v.Reserved2
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["update_time"] = v.UpdateTime
	v.fieldMap["delete_at"] = v.DeleteAt
}

func (v video) clone(db *gorm.DB) video {
	v.videoDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v video) replaceDB(db *gorm.DB) video {
	v.videoDo.ReplaceDB(db)
	return v
}

type videoDo struct{ gen.DO }

type IVideoDo interface {
	gen.SubQuery
	Debug() IVideoDo
	WithContext(ctx context.Context) IVideoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoDo
	WriteDB() IVideoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoDo
	Not(conds ...gen.Condition) IVideoDo
	Or(conds ...gen.Condition) IVideoDo
	Select(conds ...field.Expr) IVideoDo
	Where(conds ...gen.Condition) IVideoDo
	Order(conds ...field.Expr) IVideoDo
	Distinct(cols ...field.Expr) IVideoDo
	Omit(cols ...field.Expr) IVideoDo
	Join(table schema.Tabler, on ...field.Expr) IVideoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoDo
	Group(cols ...field.Expr) IVideoDo
	Having(conds ...gen.Condition) IVideoDo
	Limit(limit int) IVideoDo
	Offset(offset int) IVideoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoDo
	Unscoped() IVideoDo
	Create(values ...*model.Video) error
	CreateInBatches(values []*model.Video, batchSize int) error
	Save(values ...*model.Video) error
	First() (*model.Video, error)
	Take() (*model.Video, error)
	Last() (*model.Video, error)
	Find() ([]*model.Video, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Video, err error)
	FindInBatches(result *[]*model.Video, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Video) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoDo
	Assign(attrs ...field.AssignExpr) IVideoDo
	Joins(fields ...field.RelationField) IVideoDo
	Preload(fields ...field.RelationField) IVideoDo
	FirstOrInit() (*model.Video, error)
	FirstOrCreate() (*model.Video, error)
	FindByPage(offset int, limit int) (result []*model.Video, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoDo) Debug() IVideoDo {
	return v.withDO(v.DO.Debug())
}

func (v videoDo) WithContext(ctx context.Context) IVideoDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoDo) ReadDB() IVideoDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoDo) WriteDB() IVideoDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoDo) Session(config *gorm.Session) IVideoDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoDo) Clauses(conds ...clause.Expression) IVideoDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoDo) Returning(value interface{}, columns ...string) IVideoDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoDo) Not(conds ...gen.Condition) IVideoDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoDo) Or(conds ...gen.Condition) IVideoDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoDo) Select(conds ...field.Expr) IVideoDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoDo) Where(conds ...gen.Condition) IVideoDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoDo) Order(conds ...field.Expr) IVideoDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoDo) Distinct(cols ...field.Expr) IVideoDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoDo) Omit(cols ...field.Expr) IVideoDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoDo) Join(table schema.Tabler, on ...field.Expr) IVideoDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoDo) Group(cols ...field.Expr) IVideoDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoDo) Having(conds ...gen.Condition) IVideoDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoDo) Limit(limit int) IVideoDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoDo) Offset(offset int) IVideoDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoDo) Unscoped() IVideoDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoDo) Create(values ...*model.Video) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoDo) CreateInBatches(values []*model.Video, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoDo) Save(values ...*model.Video) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoDo) First() (*model.Video, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Video), nil
	}
}

func (v videoDo) Take() (*model.Video, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Video), nil
	}
}

func (v videoDo) Last() (*model.Video, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Video), nil
	}
}

func (v videoDo) Find() ([]*model.Video, error) {
	result, err := v.DO.Find()
	return result.([]*model.Video), err
}

func (v videoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Video, err error) {
	buf := make([]*model.Video, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoDo) FindInBatches(result *[]*model.Video, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoDo) Attrs(attrs ...field.AssignExpr) IVideoDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoDo) Assign(attrs ...field.AssignExpr) IVideoDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoDo) Joins(fields ...field.RelationField) IVideoDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoDo) Preload(fields ...field.RelationField) IVideoDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoDo) FirstOrInit() (*model.Video, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Video), nil
	}
}

func (v videoDo) FirstOrCreate() (*model.Video, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Video), nil
	}
}

func (v videoDo) FindByPage(offset int, limit int) (result []*model.Video, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoDo) Delete(models ...*model.Video) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoDo) withDO(do gen.Dao) *videoDo {
	v.DO = *do.(*gen.DO)
	return v
}
