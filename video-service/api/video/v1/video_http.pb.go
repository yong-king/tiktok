// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: video/v1/video.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoServiceCreateVideo = "/video.VideoService/CreateVideo"
const OperationVideoServiceGetVideoByTitle = "/video.VideoService/GetVideoByTitle"
const OperationVideoServiceListUserVideos = "/video.VideoService/ListUserVideos"
const OperationVideoServiceUploadVideo = "/video.VideoService/UploadVideo"

type VideoServiceHTTPServer interface {
	// CreateVideo 上传视频信息
	CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoReply, error)
	GetVideoByTitle(context.Context, *GetVideoByTitleRequest) (*GetVideoByTitleReply, error)
	// ListUserVideos 获取用户视频列表
	ListUserVideos(context.Context, *ListUserVideosRequest) (*ListUserVideosReply, error)
	// UploadVideo 上传视频
	UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoReply, error)
}

func RegisterVideoServiceHTTPServer(s *http.Server, srv VideoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/video/create", _VideoService_CreateVideo0_HTTP_Handler(srv))
	r.GET("/api/video", _VideoService_ListUserVideos0_HTTP_Handler(srv))
	r.POST("/api/video/upload", _VideoService_UploadVideo0_HTTP_Handler(srv))
	r.GET("/api/video/get/title", _VideoService_GetVideoByTitle0_HTTP_Handler(srv))
}

func _VideoService_CreateVideo0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceCreateVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVideo(ctx, req.(*CreateVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateVideoReply)
		return ctx.Result(200, reply)
	}
}

func _VideoService_ListUserVideos0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserVideosRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceListUserVideos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserVideos(ctx, req.(*ListUserVideosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserVideosReply)
		return ctx.Result(200, reply)
	}
}

func _VideoService_UploadVideo0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceUploadVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadVideo(ctx, req.(*UploadVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadVideoReply)
		return ctx.Result(200, reply)
	}
}

func _VideoService_GetVideoByTitle0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoByTitleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceGetVideoByTitle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoByTitle(ctx, req.(*GetVideoByTitleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoByTitleReply)
		return ctx.Result(200, reply)
	}
}

type VideoServiceHTTPClient interface {
	CreateVideo(ctx context.Context, req *CreateVideoRequest, opts ...http.CallOption) (rsp *CreateVideoReply, err error)
	GetVideoByTitle(ctx context.Context, req *GetVideoByTitleRequest, opts ...http.CallOption) (rsp *GetVideoByTitleReply, err error)
	ListUserVideos(ctx context.Context, req *ListUserVideosRequest, opts ...http.CallOption) (rsp *ListUserVideosReply, err error)
	UploadVideo(ctx context.Context, req *UploadVideoRequest, opts ...http.CallOption) (rsp *UploadVideoReply, err error)
}

type VideoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoServiceHTTPClient(client *http.Client) VideoServiceHTTPClient {
	return &VideoServiceHTTPClientImpl{client}
}

func (c *VideoServiceHTTPClientImpl) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...http.CallOption) (*CreateVideoReply, error) {
	var out CreateVideoReply
	pattern := "/api/video/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoServiceCreateVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) GetVideoByTitle(ctx context.Context, in *GetVideoByTitleRequest, opts ...http.CallOption) (*GetVideoByTitleReply, error) {
	var out GetVideoByTitleReply
	pattern := "/api/video/get/title"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoServiceGetVideoByTitle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) ListUserVideos(ctx context.Context, in *ListUserVideosRequest, opts ...http.CallOption) (*ListUserVideosReply, error) {
	var out ListUserVideosReply
	pattern := "/api/video"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoServiceListUserVideos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...http.CallOption) (*UploadVideoReply, error) {
	var out UploadVideoReply
	pattern := "/api/video/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoServiceUploadVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
