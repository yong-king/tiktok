// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/contrib/registry/consul/v2"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"ralation-service/internal/biz"
	"ralation-service/internal/conf"
	"ralation-service/internal/data"
	"ralation-service/internal/server"
	"ralation-service/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger, registry *consul.Registry) (*kratos.App, func(), error) {
	db, err := data.NewDB(confData)
	if err != nil {
		return nil, nil, err
	}
	client := data.NewRedisClient(confData)
	dataData, cleanup, err := data.NewData(confData, logger, db, client, registry)
	if err != nil {
		return nil, nil, err
	}
	relationRepo := data.NewRelationRepo(dataData, logger)
	relationUsecase := biz.NewGreeterUsecase(relationRepo, logger)
	relationService := service.NewRelationService(relationUsecase)
	grpcServer := server.NewGRPCServer(confServer, relationService, logger)
	httpServer := server.NewHTTPServer(confServer, relationService, logger)
	app := newApp(logger, grpcServer, httpServer, registry)
	return app, func() {
		cleanup()
	}, nil
}
