syntax = "proto3";
option go_package = "user/api/user/v1;v1";
package user;

import "google/api/annotations.proto";

service UserService {
  rpc Register(RegisterRequest) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/api/user/register"
      body: "*"
    };
  };
  rpc Login(LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/user/login"
      body: "*"
    };
  };
  rpc UserInfo(UserInfoRequest) returns (UserInfoReply) {
    option (google.api.http) = {
      get: "/api/user"
    };
  }

  rpc RefreshToken(RefreshRequest) returns (RefreshReply);
  rpc ParseToken(ParseTokenRequest) returns (ParseTokenReply);

  rpc CheckUserExistByUserID(CheckUserExistByUserIDRequest) returns (CheckUserExistByUserIDReply) {
    option (google.api.http) = {
      get: "/api/user/check"
    };
  };

  rpc BatchGetUserInfo(BatchGetUserInfoRequest) returns (BatchGetUserInfoReply);
}

// =========================批量获取用户信息============================
message BatchGetUserInfoRequest {
  repeated int64 author_ids = 1;
}

message BatchGetUserInfoReply {
  repeated Author users = 1;
}

message Author {
  int64 id = 1;
  string name = 2;
  string avatar_url = 3;
}

// =========================用户存在============================
message CheckUserExistByUserIDRequest {
  int64 user_id = 1;
}

message CheckUserExistByUserIDReply {
  bool exist = 1;
}

//  =========================用户注册============================

message RegisterRequest {
  string username = 1; // 用户名，最长为32位
  string password = 2; // 密码，最长位32位
}

message RegisterReply {
  int32 status_code = 1;
  string status_msg = 2;
  int64 user_id = 3;
  string token = 4;
}

//  ==========================用户登录============================
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginReply {
  int32 status_code = 1;
  string status_msg = 2;
  int64 user_id = 3;
  string token = 4;
  string refresh_token = 5;
}

//  ===========================用户信息===========================
message UserInfoRequest {
  int64 user_id = 1;
  int64 current_user_id = 2; // 当前登录用户ID（用于判断是否关注）
}

message UserInfoReply {
  int32 status_code = 1;
  string status_msg = 2;
  User user = 3;
}


message User {
  int64 id = 1; // 用户id
  string name = 2;  // 用户名称
  int32 follow_count = 3; // 关注总数
  int32 follower_count = 4; // 粉丝总数
  bool is_follow = 5; // true-已关注，false-未关注
  string avatar = 6;  // 用户头像
  string background_image = 7;  // 用户个人页顶部大图
  string signature = 8; // 个人简介
  int32 total_favorited = 9;  // 获赞数量
  int32 work_count = 10;  // 作品数量
  int32 favorite_count = 11;  // 点赞数量
}


//  ===========================解析token===========================
message ParseTokenRequest  {
  string token = 1;
  string refreshToken = 2;
}

message ParseTokenReply {
  int64 user_id = 1;
}

message RefreshRequest {
  string refresh_token = 1;
}

message RefreshReply {
  int32 status_code = 1;
  string status_msg = 2;
  string token = 3;
}
